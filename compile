#! /bin/bash
# Copyright (c) 2017, Peter K. G. Williams.
#
# This file is part of Dedalus, which is free software distributed
# under the terms of the GPLv3 license.  A copy of the license should
# have been included in the file 'LICENSE.txt', and is also available
# online at <http://www.gnu.org/licenses/gpl-3.0.html>.

dedalus_python_version=3.6

function die () {
    echo >&2 "error:" "$@"
    exit 1
}

if [ "$1" = -h -o "$1" = --help ] ; then
    echo "usage: $0 [packagename packagename...]"
    echo
    echo "Builds all needed packages if no arguments are given. Otherwise, builds the packages"
    echo "named on the command line."
    exit 0
fi

stack=$(cd $(dirname $0) && pwd)/stack

if [ ! -f $stack/.setup-complete ] ; then
    die "software stack not yet set up; please run ./initialize first"
fi

if [ ! -f $stack/.configuration ] ; then
    die "software stack not yet set up; please run ./configure first"
fi

set -e

$stack/bin/python support/check-environment.py $stack/.environment.pkl

# Adopt the build environment.
export PATH="$stack/bin:$PATH"
hash -r

export DEDALUS_BUILDER_SETUP="$stack/bin/dedalus_builder_setup $stack/.environment.pkl $stack/.configuration"

platform=$(conda info |grep 'platform :' |sed -e 's/.*platform : //')

source $stack/.configuration
export use_system_blas # these need to be exported now to take effect in the Jinja templating
export system_blas_dir
export use_system_mpi

if [ $# -gt 0 ] ; then
    # User has named packages to build on the command line.
    implicit=false
    packages=( "$@" )
else
    # Automatically determine which package need building.
    implicit=true

    # conda-forge's `hdf5` depends on `libgfortran` which is only available in
    # `defaults`, not purely `conda-forge`. Because `defaults` and
    # `conda-forge` are substantially out of sync with regards to compiler
    # versions right now, we very much want to be able to build without
    # looking at `defaults` at all. So, we repackage an acceptable
    # `libgfortran`. It doesn't seem worthwhile to build our own HDF5 at the
    # moment.
    packages=(system-libs libgfortran)

    if [ $use_system_blas -ne 0 ] ; then
        # Build custom copies of the packages that depend sensitively on the system
        # BLAS implementation.
        packages+=(numpy scipy)
    fi

    if [ $use_system_mpi -ne 0 ] ; then
        # Custom copies of packages that depend sensitively on the system MPI implementation.
        packages+=(mpi4py)
    else
        # `mpich` depends on `libgcc`, which is in the same boat as `libgfortran`.
        packages+=(libgcc)
    fi

    packages+=(
        fftw
        dedalus
    )
fi

for name in "${packages[@]}" ; do
    [ -d "$name" ] || die "unknown package \"$name\""

    vers=$(grep 'set version =' $name/meta.yaml |sed -e 's/[^"]*"//' -e 's/".*//')
    build_number=$(grep 'set build_number =' $name/meta.yaml |sed -e 's/[^"]*"//' -e 's/".*//')
    build_string=$(grep 'set build_string =' $name/meta.yaml |sed -e 's/[^"]*"//' -e 's/".*//')
    pkg="$stack/conda-bld/$platform/$name-$vers-$build_number$build_string.tar.bz2"

    if $implicit ; then
        if [ "$pkg" -nt "$name/meta.yaml" ] ; then
            echo "skipping $name: package exists and is newer than $name/meta.yaml"
            continue
        fi
    fi

    echo "Building $name with logs to $name/build.log ..."
    wrapout -c conda build --python $dedalus_python_version --override-channels -c conda-forge $name >$name/build.log ||
      die "package build failed! Consult $name/build.log for details."
done

if $implicit ; then
    echo
    echo "You can now create a new Python environment with Dedalus and IPython by running"
    echo "\"./install-fresh <prefix>\", or install Dedalus into an existing environment"
    echo "by running \"./install-into <prefix>\"."
    echo
fi
